{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","setName","userName","setUsername","followers","setFollowers","following","setFollowing","repos","setRepos","avatar","setAvatar","userInput","setUserInput","error","setError","useEffect","fetch","then","res","json","data","setData","login","public_repos","avatar_url","className","Form","onSubmit","message","Group","Input","placeholder","onChange","e","target","value","Button","content","Card","Image","src","wrapped","ui","Content","Header","extra","Icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAyGeA,MArGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIqBN,mBAAS,IAJ9B,mBAINO,EAJM,KAIKC,EAJL,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,OAMeV,mBAAS,IANxB,mBAMNW,EANM,KAMEC,EANF,OAOqBZ,mBAAS,IAP9B,mBAONa,EAPM,KAOKC,EAPL,OAQad,mBAAS,MARtB,mBAQNe,EARM,KAQCC,EARD,KAUbC,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,EAAQD,QAEX,IAEH,IAAMC,EAAU,SAAC,GAOV,IANLtB,EAMI,EANJA,KACAuB,EAKI,EALJA,MACAnB,EAII,EAJJA,UACAE,EAGI,EAHJA,UACAkB,EAEI,EAFJA,aACAC,EACI,EADJA,WAEAxB,EAAQD,GACRG,EAAYoB,GACZlB,EAAaD,GACbG,EAAaD,GACbG,EAASe,GACTb,EAAUc,IAoBZ,OACE,gCACE,qBAAKC,UAAU,SAAf,+BACA,qBAAKA,UAAU,SAAf,SACE,cAACC,EAAA,EAAD,CAAMC,SAjBS,WACnBX,MAAM,gCAAD,OAAiCL,IACnCM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACDA,EAAKQ,QACPd,EAASM,EAAKQ,UAEdP,EAAQD,GACRN,EAAS,WASX,SACE,eAACY,EAAA,EAAKG,MAAN,WACE,cAACH,EAAA,EAAKI,MAAN,CACEC,YAAY,cACZhC,KAAK,cACLiC,SA1BS,SAACC,GACpBrB,EAAaqB,EAAEC,OAAOC,UA2Bd,cAACT,EAAA,EAAKU,OAAN,CAAaC,QAAQ,kBAI1BxB,EACC,6BAAKA,IAEL,qBAAKY,UAAU,OAAf,SACE,eAACa,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAK/B,EAAQgC,SAAO,EAACC,IAAI,IAChC,eAACJ,EAAA,EAAKK,QAAN,WACE,cAACL,EAAA,EAAKM,OAAN,UAAc7C,IACd,cAACuC,EAAA,EAAKM,OAAN,UAAc3C,OAEhB,cAACqC,EAAA,EAAKK,QAAN,CAAcE,OAAK,EAAnB,SACE,8BACE,cAACC,EAAA,EAAD,CAAM/C,KAAK,SACVI,EAFH,kBAKF,cAACmC,EAAA,EAAKK,QAAN,CAAcE,OAAK,EAAnB,SACE,8BACE,cAACC,EAAA,EAAD,CAAM/C,KAAK,SACVQ,EAFH,cAKF,cAAC+B,EAAA,EAAKK,QAAN,CAAcE,OAAK,EAAnB,SACE,8BACE,cAACC,EAAA,EAAD,CAAM/C,KAAK,SACVM,EAFH,2BCjFC0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.97ff462c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Form, Card, Icon, Image } from \"semantic-ui-react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [userName, setUsername] = useState(\"\");\n  const [followers, setFollowers] = useState(\"\");\n  const [following, setFollowing] = useState(\"\");\n  const [repos, setRepos] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/example\")\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data);\n      });\n  }, []);\n\n  const setData = ({\n    name,\n    login,\n    followers,\n    following,\n    public_repos,\n    avatar_url,\n  }) => {\n    setName(name);\n    setUsername(login);\n    setFollowers(followers);\n    setFollowing(following);\n    setRepos(public_repos);\n    setAvatar(avatar_url);\n  };\n\n  const handleSearch = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleSubmit = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message) {\n          setError(data.message);\n        } else {\n          setData(data);\n          setError(null);\n        }\n      });\n  };\n\n  return (\n    <div>\n      <div className=\"navbar\">GitHub API Search</div>\n      <div className=\"search\">\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Input\n              placeholder=\"GitHub User\"\n              name=\"github user\"\n              onChange={handleSearch}\n            />\n            <Form.Button content=\"Search\" />\n          </Form.Group>\n        </Form>\n      </div>\n      {error ? (\n        <h1>{error}</h1>\n      ) : (\n        <div className=\"card\">\n          <Card>\n            <Image src={avatar} wrapped ui={false} />\n            <Card.Content>\n              <Card.Header>{name}</Card.Header>\n              <Card.Header>{userName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {followers} Followers\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {repos} Repos\n              </a>\n            </Card.Content>\n            <Card.Content extra>\n              <a>\n                <Icon name=\"user\" />\n                {following} Following\n              </a>\n            </Card.Content>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}